Description: Upstream changes introduced in version 1.0-2011.06.14
 This patch has been created by dpkg-source during the package build.
 Here's the last changelog entry, hopefully it gives details on why
 those changes were made:
 .
 deepin-software-center (1.0-2011.06.14) natty; urgency=low
 .
   * Updated 2011.06.14
 .
 The person named in the Author field signed this changelog entry.
Author: Leng Ganghua <hiweed@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- deepin-software-center-1.0.orig/repos.sh
+++ deepin-software-center-1.0/repos.sh
@@ -5,7 +5,7 @@ case "$1" in
         git commit -a
         ;;
     "pull" )
-        git pull git://github.com/manateelazycat/deepin-software-center.git
+        git pull origin master
         ;;
     "push" )
         git push git@github.com:manateelazycat/deepin-software-center.git
--- deepin-software-center-1.0.orig/AUTHORS
+++ deepin-software-center-1.0/AUTHORS
@@ -2,9 +2,19 @@ This software created by Linux Deepin te
 
 * UI Designer
   Yang Can
+  Wang Zheng
   
 * Server Programmer
   Huang Wei
   
 * Client Programmer
   Wang Yong		<lazycat.manatee@gmail.com>
+
+* Translator
+  Zhang Cheng	<stephenpcg@gmail.com>
+  Chen Wei Hong <whchen@qq.com>  
+  Shen Wei Wei  <shenweiwei6@qq.com>
+  Li Wei
+  Peng Hao
+  linuxboy      <linuxboy2008@gmail.com>
+  znetor		<znetor@gmail.com>
--- deepin-software-center-1.0.orig/src/utils.py
+++ deepin-software-center-1.0/src/utils.py
@@ -29,6 +29,7 @@ import pango
 import pangocairo
 import pygtk
 import subprocess
+import time
 pygtk.require('2.0')
 
 def isDoubleClick(event):
@@ -335,3 +336,53 @@ def compareCandidates((preA, matchA, res
         return cmp(pkgA, pkgB)
     else:
         return 1        
+
+def getCurrentTime():
+    '''Get current time.'''
+    return time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())
+
+def setClickableCursor(widget):
+    '''Set clickable cursor.'''
+    # Use widget in lambda, and not widget pass in function.
+    # Otherwise, if widget free before callback, you will got error:
+    # free variable referenced before assignment in enclosing scope, 
+    widget.connect("enter-notify-event", lambda w, e: setCursor(w, gtk.gdk.HAND2))
+    widget.connect("leave-notify-event", lambda w, e: setDefaultCursor(w))
+        
+def setCursor(widget, cursorType):
+    '''Set cursor.'''
+    widget.window.set_cursor(gtk.gdk.Cursor(cursorType))
+
+def setDefaultCursor(widget):
+    '''Set default cursor.'''
+    widget.window.set_cursor(None)
+
+def setLabelMarkup(widget, label, normalMarkup, activeMarkup):
+    '''Set label markup.'''
+    widget.connect("enter-notify-event", lambda w, e: setMarkup(label, activeMarkup))
+    widget.connect("leave-notify-event", lambda w, e: setMarkup(label, normalMarkup))
+    
+def setMarkup(label, markup):
+    '''Set markup.'''
+    label.set_markup(markup)
+
+def setClickableLabel(widget, label, normalMarkup, activeMarkup):
+    '''Set clickable label.'''
+    # Set label markup.
+    widget.connect("enter-notify-event", lambda w, e: setMarkup(label, activeMarkup))
+    widget.connect("leave-notify-event", lambda w, e: setMarkup(label, normalMarkup))
+    
+    # Set label cursor.
+    widget.connect("enter-notify-event", lambda w, e: setCursor(w, gtk.gdk.HAND2))
+    widget.connect("leave-notify-event", lambda w, e: setDefaultCursor(w))
+
+def setCustomizeClickableCursor(eventbox, widget, cursorPath):
+    '''Set clickable cursor.'''
+    eventbox.connect("enter-notify-event", lambda w, e: setCustomizeCursor(widget, cursorPath))
+    eventbox.connect("leave-notify-event", lambda w, e: setDefaultCursor(widget))
+        
+def setCustomizeCursor(widget, cursorPath):
+    '''Set cursor.'''
+    widget.window.set_cursor(gtk.gdk.Cursor(gtk.gdk.display_get_default(),
+                                            gtk.gdk.pixbuf_new_from_file_at_size(cursorPath, 32, 32),
+                                            0, 0))
--- deepin-software-center-1.0.orig/src/searchUninstallView.py
+++ deepin-software-center-1.0/src/searchUninstallView.py
@@ -77,7 +77,7 @@ class SearchUninstallView(appView.AppVie
             
         return box
 
-    def initUninstallStatus(self, pkgName):
+    def initUninstallStatus(self, pkgName, updateVote=False):
         '''Init uninstall status.'''
         if self.itemDict.has_key(pkgName):
             appItem = self.itemDict[pkgName]
@@ -85,3 +85,6 @@ class SearchUninstallView(appView.AppVie
             appItem.confirmUninstall = False
             appItem.initAdditionStatus()
         
+        # Request vote data.
+        if updateVote:
+            self.fetchVoteCallback(PAGE_UNINSTALL, [pkgName], True)
--- deepin-software-center-1.0.orig/src/download.py
+++ deepin-software-center-1.0/src/download.py
@@ -41,13 +41,14 @@ import xmlrpclib
 (ARIA2_MAJOR_VERSION, ARIA2_MINOR_VERSION, _) = utils.getAria2Version()
 
 class Download(td.Thread):
-    def __init__(self, pkgName, updateCallback, finishCallback):
+    def __init__(self, pkgName, updateCallback, finishCallback, messageCallback):
         # Init.
         td.Thread.__init__(self)
         self.cache = apt.Cache()
         self.pkgName = pkgName
         self.updateCallback = updateCallback
         self.finishCallback = finishCallback
+        self.messageCallback = messageCallback
         self.hash_check = True
         self.print_metalink = False
         self.server = xmlrpclib.ServerProxy('http://localhost:6800/rpc')
@@ -116,6 +117,7 @@ class Download(td.Thread):
             result = self.download([self.pkgName])
             self.server.aria2.shutdown()
         except Exception, e:
+            self.messageCallback("%s: 下载失败, 请检查你的网络链接." % self.pkgName)
             self.updateCallback(self.pkgName, self.progress, "下载失败")
             result = DOWNLOAD_STATUS_FAILED
             print "Download error: ", e
@@ -200,6 +202,7 @@ class Download(td.Thread):
             
             # Stop download if reach retry times.
             if self.retryTicker > DOWNLOAD_TIMEOUT:
+                self.messageCallback("%s: 下载超时， 请检查你的网络链接." % (self.pkgName))
                 self.updateCallback(self.pkgName, self.progress, "下载超时")
                 return DOWNLOAD_STATUS_TIMEOUT
             elif self.retryTicker > 0:
@@ -245,9 +248,7 @@ class Download(td.Thread):
                     self.progress = int(currentLength * 100 / self.totalLength)                
                     
                 # Update status.
-                self.updateCallback(self.pkgName, self.progress, 
-                                    utils.formatFileSize(currentLength) + "/" +  utils.formatFileSize(self.totalLength) +
-                                    " " + utils.formatFileSize(downloadSpeed) + "/s")
+                self.updateCallback(self.pkgName, self.progress, utils.formatFileSize(downloadSpeed) + "/s")
                 
                 # Whether all download complete.
                 downloadCompleted = all(completedStatus)
@@ -299,6 +300,7 @@ class Download(td.Thread):
             except IOError, e:
                 if e.errno != errno.ENOENT:
                     print "Failed to check hash", e
+                    self.messageCallback("%s: 校验失败." % self.pkgName)
                 return False
         else:
             return True
@@ -350,7 +352,7 @@ def get_filename(version):
 class DownloadQueue:
     '''Download queue'''
 	
-    def __init__(self, updateCallback, finishCallback, failedCallback):
+    def __init__(self, updateCallback, finishCallback, failedCallback, messageCallback):
         '''Init for download queue.'''
         # Init.
         self.lock = False
@@ -360,6 +362,7 @@ class DownloadQueue:
         self.updateCallback = updateCallback
         self.finishCallback = finishCallback
         self.failedCallback = failedCallback
+        self.messageCallback = messageCallback
         
     def startDownloadThread(self, pkgName):
         '''Start download thread.'''
@@ -370,7 +373,7 @@ class DownloadQueue:
         self.pkgName = pkgName
         
         # Start download thread.
-        download = Download(pkgName, self.updateCallback, self.finishDownload)
+        download = Download(pkgName, self.updateCallback, self.finishDownload, self.messageCallback)
         download.start()
         
         # Get download queue.
--- deepin-software-center-1.0.orig/src/constant.py
+++ deepin-software-center-1.0/src/constant.py
@@ -313,15 +313,17 @@ LINE_RIGHT = 3
 BUTTON_FONT_SIZE_SMALL = 10
 BUTTON_FONT_SIZE_MEDIUM = 11
 LABEL_FONT_SIZE = 10 * 1000
+LABEL_FONT_MEDIUM_SIZE = 11 * 1000
 LABEL_FONT_LARGE_SIZE = 12 * 1000
 LABEL_FONT_X_LARGE_SIZE = 15 * 1000
-LABEL_FONT_XX_LARGE_SIZE = 18 * 1000
+LABEL_FONT_XX_LARGE_SIZE = 20 * 1000
 
 DOWNLOAD_TIMEOUT = 30           # times
 POST_TIMEOUT = 10               # seconds
 GET_TIMEOUT = 10               # seconds
 
 ACTION_BUTTON_PADDING_X = 5
+ACTION_BUTTON_PADDING_Y = 5
 ACTION_BUTTON_WIDTH = 100
 
 TOPBAR_PADDING_LEFT = 10
--- deepin-software-center-1.0.orig/src/action.py
+++ deepin-software-center-1.0/src/action.py
@@ -63,7 +63,8 @@ class Action(td.Thread):
     '''Action.'''
 
     def __init__(self, pkgName, actionType, updateCallback, 
-                 finishCallback, failedCallback, scanCallback):
+                 finishCallback, failedCallback, scanCallback,
+                 messageCallback):
         '''Init for action.'''
         td.Thread.__init__(self)
         self.setDaemon(True) # make thread exit when main program exit 
@@ -77,6 +78,7 @@ class Action(td.Thread):
         self.finishCallback = finishCallback
         self.failedCallback = failedCallback
         self.scanCallback = scanCallback
+        self.messageCallback = messageCallback
 
         # Analysis dependent packages.
         if actionType == ACTION_INSTALL:
@@ -103,6 +105,7 @@ class Action(td.Thread):
             self.finish()
         except Exception, e:
             # Debug.
+            self.messageCallback("%s: 安装失败， 请确保没有其他APT进程在运行." % self.pkgName)
             print "Got error `%s` when commit apt action." % (e)
             
             # Call failed callback.
@@ -142,7 +145,7 @@ class Action(td.Thread):
 class ActionQueue:
     '''Action queue.'''
 
-    def __init__(self, updateCallback, finishCallback, failedCallback):
+    def __init__(self, updateCallback, finishCallback, failedCallback, messageCallback):
         '''Init for action queue.'''
         # Init.
         self.lock = False
@@ -150,6 +153,7 @@ class ActionQueue:
         self.updateCallback = updateCallback
         self.finishCallback = finishCallback
         self.failedCallback = failedCallback
+        self.messageCallback = messageCallback
 
     def startActionThread(self, pkgName, actionType):
         '''Start action thread.'''
@@ -161,7 +165,8 @@ class ActionQueue:
                         self.updateCallback,
                         self.finishCallback,
                         self.failedCallback,
-                        self.finishAction)
+                        self.finishAction,
+                        self.messageCallback)
         action.start()
 
     def addAction(self, pkgName, actionType):
--- /dev/null
+++ deepin-software-center-1.0/src/tooltips.py
@@ -0,0 +1,131 @@
+#! /usr/bin/env python
+# -*- coding: utf-8 -*-
+
+# Author:     Andy Stewart <lazycat.manatee@gmail.com>
+# Maintainer: Andy Stewart <lazycat.manatee@gmail.com>
+# 
+# Copyright (C) 2011 Andy Stewart, all rights reserved.
+# 
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# any later version.
+# 
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# 
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+from constant import *
+from draw import *
+import glib
+import gtk
+
+class Tooltips:
+    '''Tooltips.'''
+    
+    def __init__(self, window, widget):
+        '''Init for tooltips.'''
+        # Init.
+        self.width = 300
+        self.height = 24
+        self.paddingX = 10
+        self.startTimes = 10
+        self.endTimes = 60
+        self.times = 70
+        self.interval = 80     # in milliseconds
+        self.ticker = self.times
+        
+        # Create tooltips window.
+        self.window = gtk.Window()
+        self.window.set_decorated(False)
+        self.window.set_resizable(True)
+        self.window.set_transient_for(window.get_toplevel())
+        self.window.set_opacity(0.9)
+        self.window.set_property("accept-focus", False)
+        self.window.set_size_request(-1, self.height)
+        
+        # Create tooltips label.
+        self.label = gtk.Label()
+        self.label.set_single_line_mode(True) # just one line
+        self.align = gtk.Alignment()
+        self.align.set(0.5, 0.5, 0.0, 0.0)
+        self.align.set_padding(0, 0, self.paddingX, self.paddingX)
+        self.align.add(self.label)
+        self.window.add(self.align)
+        
+        # Update position.
+        self.updatePosition(widget)
+        
+        # Add signal handler.
+        window.connect("size-allocate", lambda w, e: self.updatePosition(widget))
+        window.connect("configure-event", lambda w, e: self.updatePosition(widget))
+        self.window.connect("expose-event", self.show)
+        
+    def start(self, message):
+        '''Start.'''
+        if self.ticker >= self.times:
+            glib.timeout_add(self.interval, self.redraw)
+            
+        self.ticker = 0
+        self.label.set_markup("<span foreground='#333333' size='%s'>%s</span>" % (LABEL_FONT_MEDIUM_SIZE, message))
+        
+    def redraw(self):
+        '''Redraw.'''
+        # Hide tooltips when ticker reach times.
+        if self.ticker >= self.times:
+            self.window.hide_all()
+            
+            return False
+        # Or show animation.
+        else:
+            self.ticker += 1
+            self.window.queue_draw()
+            self.window.show_all()
+            
+            return True
+        
+    def show(self, widget, event):
+        '''Show'''
+        # Draw background.
+        rect = widget.allocation
+        cr = widget.window.cairo_create()
+        cr.set_source_rgb(*colorHexToCairo("#b8d2ff"))
+        cr.rectangle(0, 0, rect.width, rect.height)
+        cr.fill()
+        
+        # Change opacity with ticker.
+        if self.ticker <= self.startTimes:
+            self.window.set_opacity(self.ticker * 0.1)
+        elif self.ticker <= self.endTimes:
+            self.window.set_opacity(1)
+        else:
+            self.window.set_opacity((self.times - self.ticker) * 0.1)
+            
+        # Update window position.
+        (width, _) = self.label.get_layout().get_pixel_size()
+        self.window.move(self.x - width / 2 - self.paddingX, self.y)
+        
+        # Expose recursively.
+        if widget.get_child() != None:
+            widget.propagate_expose(widget.get_child(), event)
+            
+        return True
+        
+    def updatePosition(self, widget):
+        '''Update position.'''
+        # Get coordinate.
+        (wx, wy) = widget.window.get_origin()
+        rect = widget.get_allocation()
+        (ww, wh) = (rect.width, rect.height)
+        
+        # Update coordinate.
+        self.x = wx + ww / 2
+        self.y = wy - self.height
+        
+        # Redraw.
+        self.window.queue_draw()
+            
--- deepin-software-center-1.0.orig/src/uninstallView.py
+++ deepin-software-center-1.0/src/uninstallView.py
@@ -70,10 +70,14 @@ class UninstallView(appView.AppView):
             
         return box
     
-    def initUninstallStatus(self, pkgName):
+    def initUninstallStatus(self, pkgName, updateVote=False):
         '''Init uninstall status.'''
         if self.itemDict.has_key(pkgName):
             appItem = self.itemDict[pkgName]
             appItem.appInfo.status = APP_STATE_INSTALLED
             appItem.confirmUninstall = False
             appItem.initAdditionStatus()
+            
+        # Request vote data.
+        if updateVote:
+            self.fetchVoteCallback(PAGE_UNINSTALL, [pkgName], False)
--- deepin-software-center-1.0.orig/src/navigatebar.py
+++ deepin-software-center-1.0/src/navigatebar.py
@@ -29,9 +29,10 @@ pygtk.require('2.0')
 class NavigateBar:
     '''Interface for navigate bar.'''
 	
-    def __init__(self):
+    def __init__(self, repoCache):
         '''Init for navigate bar.'''
         # Init.
+        self.repoCache = repoCache
         self.iconPadding = 8
         
         self.pageId = PAGE_RECOMMEND
@@ -57,7 +58,7 @@ class NavigateBar:
         self.repositoryIcon     = self.createNavIcon("软件仓库", "./icons/navigate/nav_repo.png", PAGE_REPO)
         self.navBox.pack_start(self.repositoryIcon, False, False, self.iconPadding)
         
-        self.updateIcon         = self.createNavIcon("软件更新", "./icons/navigate/nav_update.png", PAGE_UPGRADE)
+        self.updateIcon         = self.createUpdateIcon("软件更新", "./icons/navigate/nav_update.png", PAGE_UPGRADE)
         self.navBox.pack_start(self.updateIcon, False, False, self.iconPadding)
         
         self.uninstallIcon      = self.createNavIcon("软件卸载", "./icons/navigate/nav_uninstall.png", PAGE_UNINSTALL)
@@ -66,8 +67,8 @@ class NavigateBar:
         self.communityIcon      = self.createNavIcon("社区分享", "./icons/navigate/nav_hi.png", PAGE_COMMUNITY)
         self.navBox.pack_start(self.communityIcon, False, False, self.iconPadding)
         
-        # self.moreIcon           = self.createNavIcon("更多精彩", "./icons/navigate/nav_more.png", PAGE_MORE)
-        # self.navBox.pack_start(self.moreIcon, False, False, self.iconPadding)
+        self.moreIcon           = self.createNavIcon("更多功能", "./icons/navigate/nav_more.png", PAGE_MORE)
+        self.navBox.pack_start(self.moreIcon, False, False, self.iconPadding)
         
         self.box.show_all()
 
@@ -83,6 +84,21 @@ class NavigateBar:
         
         return eventBox
     
+    def createUpdateIcon(self, iconName, iconPath, pageId):
+        '''Create navigate icon.'''
+        eventButton = gtk.Button()
+        updateButtonSetBackground(
+            eventButton,
+            iconName, iconPath,
+            "./icons/navigate/menu_hover.png",
+            "./icons/navigate/menu_press.png",
+            pageId,
+            self.getPageId,
+            self.getUpgradableNum
+            )
+        
+        return eventButton
+    
     def createNavIcon(self, iconName, iconPath, pageId):
         '''Create navigate icon.'''
         eventButton = gtk.Button()
@@ -101,3 +117,6 @@ class NavigateBar:
         '''Get page id.'''
         return self.pageId
     
+    def getUpgradableNum(self):
+        '''Get upgradable packages number.'''
+        return len(self.repoCache.upgradablePkgs)
--- deepin-software-center-1.0.orig/src/searchCompletion.py
+++ deepin-software-center-1.0/src/searchCompletion.py
@@ -64,6 +64,7 @@ class SearchCompletion:
         self.scrolledwindow = gtk.ScrolledWindow()
         self.scrolledwindow.set_property("shadow-type", gtk.SHADOW_NONE)
         self.scrolledwindow.set_policy(gtk.POLICY_NEVER, gtk.POLICY_AUTOMATIC)
+        self.frame = gtk.Frame()
         
         self.treeView.connect("row-activated", self.click)
         self.entry.connect("focus-out-event", lambda w, e: self.hide())
@@ -71,7 +72,8 @@ class SearchCompletion:
         self.entry.connect("changed", self.show)
         
         self.scrolledwindow.add(self.treeView)
-        self.window.add(self.scrolledwindow)
+        self.frame.add(self.scrolledwindow)
+        self.window.add(self.frame)
         
     def show(self, editable):
         '''Show search completion.'''
--- deepin-software-center-1.0.orig/src/detailView.py
+++ deepin-software-center-1.0/src/detailView.py
@@ -56,10 +56,12 @@ class DetailView:
     ALIGN_Y = 10
     STAR_PADDING_X = 10
     INFO_PADDING_Y = 3
+    SEND_COMMENT_BOX_HEIGHT = 40
 
     def __init__(self, aptCache, pageId, appInfo, 
                  switchStatus, downloadQueue, actionQueue,
-                 exitCallback, noscreenshotList, updateMoreCommentCallback):
+                 exitCallback, noscreenshotList, updateMoreCommentCallback,
+                 messageCallback):
         '''Init for detail view.'''
         # Init.
         self.aptCache = aptCache
@@ -67,9 +69,12 @@ class DetailView:
         self.appInfo = appInfo
         pkg = appInfo.pkg
         self.bigScreenshot = None
+        self.readMoreBox = gtk.HBox()
         self.readMoreAlign = None
+        self.commentNotifyAlign = None
         self.lastCommentId = ""
         self.updateMoreCommentCallback = updateMoreCommentCallback
+        self.messageCallback = messageCallback
         
         self.box = gtk.VBox()
         self.eventbox = gtk.EventBox()
@@ -244,14 +249,14 @@ class DetailView:
         screenshotLabel.set_alignment(0.0, 0.5)
         screenshotBox.pack_start(screenshotLabel, False, False)
         
-        imageBox = gtk.EventBox()
-        imageBox.set_size_request(self.SCREENSHOT_WIDTH, self.SCREENSHOT_HEIGHT)
-        imageBox.connect("expose-event", lambda w, e: drawBackground(w, e, "#FFFFFF"))
-        screenshotBox.pack_start(imageBox, False, False)
+        self.imageBox = gtk.EventBox()
+        self.imageBox.set_size_request(self.SCREENSHOT_WIDTH, self.SCREENSHOT_HEIGHT)
+        self.imageBox.connect("expose-event", lambda w, e: drawBackground(w, e, "#FFFFFF"))
+        screenshotBox.pack_start(self.imageBox, False, False)
         
         self.screenshotImage = gtk.Image()
-        imageBox.add(self.screenshotImage)
-        imageBox.connect("button-press-event", lambda w, e: self.showBigScreenshot(w, pkgName, noscreenshotList))
+        self.imageBox.add(self.screenshotImage)
+        self.imageBox.connect("button-press-event", lambda w, e: self.showBigScreenshot(w, pkgName, noscreenshotList))
 
         infoBox.pack_start(screenshotBox, False, False, self.DETAIL_PADDING_X)
         
@@ -263,13 +268,14 @@ class DetailView:
         if os.path.exists (screenshotPath):
             self.screenshotImage.set_from_pixbuf(
                 gtk.gdk.pixbuf_new_from_file_at_size(screenshotPath, screenshotWidth, screenshotHeight))
+            utils.setCustomizeClickableCursor(self.imageBox, self.screenshotImage, "./icons/screenshot/zoom.png")
         # Otherwise just fetch screenshot when not in black list.
         elif not pkgName in noscreenshotList:
             # Init fetch thread.
             fetchScreenshot = FetchScreenshot(
-                appInfo, 
-                noscreenshotList,
-                self.screenshotImage, screenshotWidth, screenshotHeight)
+                appInfo, noscreenshotList,
+                self.imageBox, self.screenshotImage, 
+                screenshotWidth, screenshotHeight)
             
             # Start fetch thread.
             fetchScreenshot.start()
@@ -284,12 +290,31 @@ class DetailView:
             self.screenshotImage.set_from_pixbuf(gtk.gdk.pixbuf_new_from_file("./icons/screenshot/upload.png"))        
 
         # Add comment label.
+        self.commentAreaBox = gtk.VBox()
+        detailBox.pack_start(self.commentAreaBox)
+            
         self.commentListBox = gtk.VBox()
-        detailBox.pack_start(self.commentListBox)
+        
+        # Add wait box.
+        commentWaitBox = gtk.HBox()
+        commentWaitAlign = gtk.Alignment()
+        commentWaitAlign.set(0.5, 0.5, 0.0, 0.0)
+        commentWaitAlign.set_padding(20, 20, 0, 0)
+        commentWaitAlign.add(commentWaitBox)
+        self.commentAreaBox.pack_start(commentWaitAlign)
+        
+        commentWaitSpinner = gtk.Spinner()
+        commentWaitSpinner.start()
+        commentWaitSpinnerAlign = gtk.Alignment()
+        commentWaitSpinnerAlign.set(0.5, 0.5, 0.0, 0.0)
+        commentWaitSpinnerAlign.set_padding(10, 10, 10, 10)
+        commentWaitSpinnerAlign.add(commentWaitSpinner)
+        commentWaitBox.pack_start(commentWaitSpinnerAlign, False, False)
         
         commentWaitLabel = gtk.Label()
-        commentWaitLabel.set_markup("<span foreground='#1A3E88' size='%s'><b>读取用户评论...</b></span>" % (LABEL_FONT_X_LARGE_SIZE))
-        self.commentListBox.pack_start(commentWaitLabel)
+        commentWaitLabel.set_markup("<span foreground='#1A3E88' size='%s'><b>读取用户评论...</b></span>"
+                                    % (LABEL_FONT_LARGE_SIZE))
+        commentWaitBox.pack_start(commentWaitLabel, False, False)
         
         return align
     
@@ -461,6 +486,10 @@ class DetailView:
         textBuffer.set_text(commentContent)
         rightBox.pack_start(textView)
         
+        line = gtk.Image()
+        drawLine(line, "#DDDDDD", 1, False, LINE_BOTTOM)
+        commentBox.pack_start(line)
+            
         return commentAlign
     
     def updateDownloadingStatus(self, pkgName, progress, feedback):
@@ -523,10 +552,10 @@ class DetailView:
             self.appNameBox.pack_start(appVoteAlign, False, False)
         
         # Update comment list.
-        utils.containerRemoveAll(self.commentListBox)
+        utils.containerRemoveAll(self.commentAreaBox)
         
         commentTitleBox = gtk.HBox()
-        self.commentListBox.pack_start(commentTitleBox)
+        self.commentAreaBox.pack_start(commentTitleBox)
         
         commentLabel = gtk.Label()
         commentLabel.set_markup("<span foreground='#1A3E88' size='%s'><b>用户评论</b></span>" % (LABEL_FONT_LARGE_SIZE))
@@ -542,15 +571,13 @@ class DetailView:
         self.commentView.set_size_request(-1, commentViewHeight)
         commentViewFrame = gtk.Frame()
         commentViewFrame.add(self.commentView)
-        self.commentListBox.pack_start(commentViewFrame)
+        self.commentAreaBox.pack_start(commentViewFrame)
         
-        (sendCommentButton, sendCommentAlign) = newActionButton(
-            "update_selected", 1.0, 0.5, 
-            "cell", True, "发表评论", BUTTON_FONT_SIZE_MEDIUM, "#FFFFFF",
-            5
-            )
-        sendCommentButton.connect("button-press-event", lambda w, e: self.sendComment())
-        self.commentListBox.pack_start(sendCommentAlign)
+        self.sendCommentBox = gtk.HBox()
+        self.sendCommentBox.set_size_request(-1, self.SEND_COMMENT_BOX_HEIGHT)
+        self.commentAreaBox.pack_start(self.sendCommentBox)
+        
+        self.switchCommentInit()
         
         if commentNum > 0:
             self.commentNumLabel = gtk.Label()
@@ -564,20 +591,21 @@ class DetailView:
             
         line = gtk.Image()
         drawLine(line, "#DDDDDD", 1, False, LINE_BOTTOM)
-        self.commentListBox.pack_start(line)
+        self.commentAreaBox.pack_start(line)
             
         if len(commentList) == 0:
             notifyPaddingY = 20
             commentNotifyLabel = gtk.Label()
             commentNotifyLabel.set_markup(
                 "<span foreground='#1A3E88' size='%s'><b>还不快抢沙发?</b></span>" % (LABEL_FONT_X_LARGE_SIZE))
-            commentNotifyAlign = gtk.Alignment()
-            commentNotifyAlign.set(0.5, 0.5, 0.0, 0.0)
-            commentNotifyAlign.set_padding(notifyPaddingY, notifyPaddingY, 0, 0)
-            commentNotifyAlign.add(commentNotifyLabel)
-            self.commentListBox.pack_start(commentNotifyAlign)
+            self.commentNotifyAlign = gtk.Alignment()
+            self.commentNotifyAlign.set(0.5, 0.5, 0.0, 0.0)
+            self.commentNotifyAlign.set_padding(notifyPaddingY, notifyPaddingY, 0, 0)
+            self.commentNotifyAlign.add(commentNotifyLabel)
+            self.commentAreaBox.pack_start(self.commentNotifyAlign)
         else:
             # Add comment list.
+            self.commentAreaBox.pack_start(self.commentListBox)
             self.addCommentList(commentList, commentNum, True)
         
         self.scrolledWindow.show_all()
@@ -594,15 +622,12 @@ class DetailView:
             commentBox = self.createComment((commentName, commentIcon, commentDate, commentContent))
             self.commentListBox.pack_start(commentBox, False, False)
             
-            line = gtk.Image()
-            drawLine(line, "#DDDDDD", 1, False, LINE_BOTTOM)
-            self.commentListBox.pack_start(line)
-            
         self.lastCommentId = commentList.pop()["cid"]
         
         # Add read more button.
-        if self.readMoreAlign != None and self.readMoreAlign.get_parent() != None:
-            self.commentListBox.remove(self.readMoreAlign)
+        if self.readMoreBox != None and self.readMoreBox.get_parent() != None:
+            utils.containerRemoveAll(self.readMoreBox)
+            self.commentAreaBox.remove(self.readMoreBox)
         
         if (firstTime and commentNum > 20) or commentNum >= 20:
             (readMoreButton, self.readMoreAlign) = newActionButton(
@@ -610,7 +635,8 @@ class DetailView:
                 "cell", True, "查看更多的评论", BUTTON_FONT_SIZE_MEDIUM, "#FFFFFF",
                 20
                 )
-            self.commentListBox.pack_start(self.readMoreAlign, False, False)
+            self.readMoreBox.pack_start(self.readMoreAlign)
+            self.commentAreaBox.pack_start(self.readMoreBox, False, False)
             readMoreButton.connect("button-press-event", lambda w, e: self.fetchMoreComment())
             
     def sendComment(self):
@@ -630,13 +656,98 @@ class DetailView:
             # Get user name.
             userName = base64.b64encode("深度Linuxer %s" % (time.ctime()))
             
-            sendCommentThread = SendComment(pkgName, userName, comment)    
+            # Switch to comment send status.
+            self.switchCommentSend()
+            
+            # Start send comment thread.
+            sendCommentThread = SendComment(pkgName, userName, comment, 
+                                            self.sendCommentSuccess, self.sendCommentFailed)    
             sendCommentThread.start()
         else:
             print "Don't allowed send blank comment."
+            
+    def switchCommentInit(self):
+        '''Switch to comment init status.'''
+        # Clean send comment box first.
+        utils.containerRemoveAll(self.sendCommentBox)            
+
+        # Show send comment button.
+        (sendCommentButton, sendCommentAlign) = newActionButton(
+            "update_selected", 1.0, 0.5, 
+            "cell", True, "发表评论", BUTTON_FONT_SIZE_MEDIUM, "#FFFFFF",
+            5
+            )
+        sendCommentButton.connect("button-press-event", lambda w, e: self.sendComment())
+        self.sendCommentBox.pack_start(sendCommentAlign)
+        
+        self.sendCommentBox.show_all()
+            
+    def switchCommentSend(self):
+        '''Switch to comment send status.'''
+        # Clean send comment box first.
+        utils.containerRemoveAll(self.sendCommentBox)            
+        
+        # Show waiting spinner.
+        sendCommentSpinnerBox = gtk.VBox()
+        sendCommentSpinnerAlign = gtk.Alignment()
+        sendCommentSpinnerAlign.set(1.0, 0.5, 0.0, 0.0)
+        sendCommentSpinnerAlign.set_padding(0, 0, 10, 10)
+        sendCommentSpinnerAlign.add(sendCommentSpinnerBox)
+        self.sendCommentBox.pack_start(sendCommentSpinnerAlign)
+        
+        self.sendCommentSpinner = gtk.Spinner()
+        self.sendCommentSpinner.start()
+        sendCommentSpinnerBox.pack_start(self.sendCommentSpinner, True, True)
+        
+        # Show waiting label.
+        sendCommentLabel = gtk.Label()
+        sendCommentLabel.set_markup("<span foreground='#1a3e88' size='%s'>发表评论...</span>" % (LABEL_FONT_LARGE_SIZE))
+        self.sendCommentBox.pack_start(sendCommentLabel, False, False)
+        
+        self.sendCommentBox.show_all()
+            
+    @postGUI
+    def sendCommentSuccess(self, pkgName, comment, userName):
+        '''Send comment success.'''
+        # Switch to comment init status.
+        self.switchCommentInit()
+        
+        # Notify user.
+        self.messageCallback("发表 %s 评论成功" % (pkgName))
+        
+        # Add comment in comment list.
+        commentIcon = "./icons/comment/me.png"
+        commentDate = utils.getCurrentTime()
+        commentName = "深度Linuxer %s" % (commentDate)
+        commentBox = self.createComment((
+                commentName, 
+                commentIcon, 
+                commentDate, 
+                base64.b64decode(comment)))
+        
+        # Remove notify widget if have it.
+        if self.commentNotifyAlign != None:
+            self.commentAreaBox.remove(self.commentNotifyAlign)
+            self.commentAreaBox.pack_start(self.commentListBox)
+        
+        # Connect widget.
+        self.commentListBox.pack_start(commentBox, False, False)
+        self.commentListBox.reorder_child(commentBox, 0)
+
+        self.commentAreaBox.show_all()
+        
+    @postGUI
+    def sendCommentFailed(self, pkgName):
+        '''Send comment failed.'''
+        # Switch to comment init status.
+        self.switchCommentInit()
+
+        # Notify user.
+        self.messageCallback("发表 %s 评论失败， 请检查你的网络链接" % (pkgName))
         
     def fetchMoreComment(self):
         '''Fetch more comment.'''
+        # Start fetch more comment thread.
         FetchCommentThread = FetchMoreComment(
             self.pageId, 
             utils.getPkgName(self.appInfo.pkg),
@@ -644,43 +755,62 @@ class DetailView:
             self.updateMoreCommentCallback)
         FetchCommentThread.start()
         
+        # Display waiting status.
+        utils.containerRemoveAll(self.readMoreBox)
+        fetchMoreSpinner = gtk.Spinner()
+        fetchMoreSpinner.start()
+        fetchMoreAlign = gtk.Alignment()
+        fetchMoreAlign.set(1.0, 0.5, 0.0, 0.0)
+        fetchMoreAlign.set_padding(10, 10, 10, 10)
+        fetchMoreAlign.add(fetchMoreSpinner)
+        self.readMoreBox.pack_start(fetchMoreAlign, True, True)
+        
+        fetchMoreLabel = gtk.Label()
+        fetchMoreLabel.set_markup("<span foreground='#1a3e88' size='%s'>读取更多评论...</span>" % (LABEL_FONT_LARGE_SIZE))
+        self.readMoreBox.pack_start(fetchMoreLabel, False, False)
+        
+        self.commentAreaBox.show_all()
+                
     def updateMoreComment(self, voteJson):
         '''Update more comment.'''
+        # Update more comment.
         pkgName = utils.getPkgName(self.appInfo.pkg)
         commentList = voteJson["comment_list"]
         
-        if len(commentList) == 0 and self.readMoreAlign != None:
-            self.commentListBox.remove(self.readMoreAlign)
+        if len(commentList) == 0 and self.readMoreBox != None:
+            self.commentAreaBox.remove(self.readMoreBox)
         else:
             # Add comment list.
             self.addCommentList(commentList, len(commentList))
-                
+            
         self.scrolledWindow.show_all()
         
 class SendComment(td.Thread):
     '''Send comment.'''
 	
-    def __init__(self, pkgName, userName, comment):
+    def __init__(self, pkgName, userName, comment, 
+                 successCallback, failedCallback):
         '''Init for fetch detail.'''
         td.Thread.__init__(self)
         self.setDaemon(True) # make thread exit when main program exit 
         self.pkgName = pkgName
         self.userName = userName
         self.comment = comment
+        self.successCallback = successCallback
+        self.failedCallback = failedCallback
         
     def run(self):
         '''Run'''
-        # try:
-        args = {'n':self.pkgName, 'c':self.comment, 'u':self.userName}
-        
         try:
+            args = {'n':self.pkgName, 'c':self.comment, 'u':self.userName}
+            
             connection = urllib2.urlopen(
                 "http://test-linux.gteasy.com/comment.php?",
                 data=urllib.urlencode(args),
                 timeout=POST_TIMEOUT)
-            print "Send comment (%s) successful." % (self.pkgName)
+            self.successCallback(self.pkgName, self.comment, self.userName)
         except Exception, e:
-            print "Send comment (%s) failed." % (self.pkgName)
+            self.failedCallback(self.pkgName)
             
 class FetchMoreComment(td.Thread):
     '''Fetch more comment.'''
@@ -923,12 +1053,13 @@ class AppInfoItem(DownloadItem):
 class FetchScreenshot(td.Thread):
     '''Fetch screenshot.'''
 	
-    def __init__(self, appInfo, noscreenshotList, image, width, height):
+    def __init__(self, appInfo, noscreenshotList, imageBox, image, width, height):
         '''Init for fetch screenshot.'''
         td.Thread.__init__(self)
         self.setDaemon(True) # make thread exit when main program exit 
         
         self.appInfo = appInfo
+        self.imageBox = imageBox
         self.image = image
         self.proc = None
         self.returnCode = DOWNLOAD_FAILED
@@ -936,7 +1067,7 @@ class FetchScreenshot(td.Thread):
         self.height = height
         self.noscreenshotList = noscreenshotList
         self.killed = False
-
+        
     def stop(self):
         '''Stop download.'''
         if self.proc != None and self.returnCode == DOWNLOAD_FAILED:
@@ -945,6 +1076,18 @@ class FetchScreenshot(td.Thread):
             
     def run(self):
         '''Run'''
+        # Add wait widget.
+        padding = 40
+        utils.containerRemoveAll(self.imageBox)
+        waitSpinner = gtk.Spinner()
+        waitSpinner.start()
+        waitAlign = gtk.Alignment()
+        waitAlign.set(0.5, 0.5, 1.0, 1.0)
+        waitAlign.set_padding(padding, padding, padding, padding)
+        waitAlign.add(waitSpinner)
+        self.imageBox.add(waitAlign)
+        
+        # Download screenshot.
         pkgName = utils.getPkgName(self.appInfo.pkg)
         screenshotPath = SCREENSHOT_DOWNLOAD_DIR + pkgName
         
@@ -963,8 +1106,15 @@ class FetchScreenshot(td.Thread):
         self.proc = subprocess.Popen(cmdline)
         self.returnCode = self.proc.wait()
         
+        # Stop waiting widget.
+        utils.containerRemoveAll(self.imageBox)
+        self.imageBox.add(self.image)
+        self.imageBox.show_all()
+        
+        # Set screenshot.
         if self.returnCode == DOWNLOAD_SUCCESS:
             self.image.set_from_pixbuf(gtk.gdk.pixbuf_new_from_file_at_size(screenshotPath, self.width, self.height))
+            utils.setCustomizeClickableCursor(self.imageBox, self.image, "./icons/screenshot/zoom.png")
         else:
             if self.killed:
                 pkgName = utils.getPkgName(self.appInfo.pkg)
--- deepin-software-center-1.0.orig/src/appView.py
+++ deepin-software-center-1.0/src/appView.py
@@ -99,7 +99,10 @@ class AppView:
             self.box.show_all()
             
             # Request vote data.
-            self.fetchVoteCallback(self.pageId, appList, self.isSearchPage)
+            self.fetchVoteCallback(
+                self.pageId, 
+                map (lambda appInfo: utils.getPkgName(appInfo.pkg), appList),
+                self.isSearchPage)
             
         # Scroll ScrolledWindow to top after render.
         if scrollToTop:
@@ -142,6 +145,7 @@ class AppView:
                 prevBox.connect("button-press-event", lambda widget, event: self.jumpPage(max(1, self.pageIndex - self.pageSize)))
                 prevBox.connect("expose-event", lambda w, e: drawBackground(w, e, "#FFFFFF"))
                 box.pack_start(prevBox, False, False, paddingX)
+                utils.setClickableCursor(prevBox)
                 
                 first = gtk.Label()
                 first.set_markup("<span foreground='#1A3E88' size='%s'>1 ... </span>" % (LABEL_FONT_SIZE))
@@ -150,6 +154,7 @@ class AppView:
                 firstBox.connect("button-press-event", lambda widget, event: self.jumpPage(1))
                 firstBox.connect("expose-event", lambda w, e: drawBackground(w, e, "#FFFFFF"))
                 box.pack_start(firstBox, False, False, paddingX)
+                utils.setClickableCursor(firstBox)
             
             # Add index number icon.
             for i in range(startIndex, endIndex):
@@ -164,6 +169,7 @@ class AppView:
                 lastBox.connect("button-press-event", lambda widget, event: self.jumpPage(self.maxPageIndex))
                 lastBox.connect("expose-event", lambda w, e: drawBackground(w, e, "#FFFFFF"))
                 box.pack_start(lastBox, False, False, paddingX)
+                utils.setClickableCursor(lastBox)
                 
                 # Add next icon.
                 next = gtk.image_new_from_pixbuf(gtk.gdk.pixbuf_new_from_file("./icons/index/forward.png"))
@@ -173,6 +179,7 @@ class AppView:
                                                                                               self.pageIndex + self.pageSize)))
                 nextBox.connect("expose-event", lambda w, e: drawBackground(w, e, "#FFFFFF"))
                 box.pack_start(nextBox, False, False, paddingX)
+                utils.setClickableCursor(nextBox)
             
             # Add jump button.
             spinButton = gtk.SpinButton()
@@ -226,23 +233,27 @@ class AppView:
         numBox.add(numLabel)
         numBox.connect("button-press-event", lambda widget, event: self.jumpPage(index))
         numBox.connect("expose-event", lambda w, e: drawBackground(w, e, "#FFFFFF"))
+        utils.setClickableCursor(numBox)
         
         return numBox
 
-    def switchToStatus(self, pkgName, appStatus):
+    def switchToStatus(self, pkgName, appStatus, updateVote=False):
         '''Switch to downloading status.'''
         if self.itemDict.has_key(pkgName):
             appItem = self.itemDict[pkgName]
             appItem.appInfo.status = appStatus
             appItem.initAdditionStatus()
+            
+        if updateVote:
+            self.fetchVoteCallback(self.pageId, [pkgName], self.isSearchPage)
 
-    def initNormalStatus(self, pkgName, isMarkDeleted):
+    def initNormalStatus(self, pkgName, isMarkDeleted, updateVote=False):
         '''Init normal status.'''
         if isMarkDeleted:
-            self.switchToStatus(pkgName, APP_STATE_NORMAL)
+            self.switchToStatus(pkgName, APP_STATE_NORMAL, updateVote)
         else:
-            self.switchToStatus(pkgName, APP_STATE_INSTALLED)
-        
+            self.switchToStatus(pkgName, APP_STATE_INSTALLED, updateVote)
+            
     def updateDownloadingStatus(self, pkgName, progress, feedback):
         '''Update downloading status.'''
         if self.itemDict.has_key(pkgName):
--- /dev/null
+++ deepin-software-center-1.0/src/repoPage.py
@@ -0,0 +1,193 @@
+#! /usr/bin/env python
+# -*- coding: utf-8 -*-
+
+# Author:     Andy Stewart <lazycat.manatee@gmail.com>
+# Maintainer: Andy Stewart <lazycat.manatee@gmail.com>
+#
+# Copyright (C) 2011 Andy Stewart, all rights reserved.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+from appItem import *
+from constant import *
+from draw import *
+import apt_pkg
+import categorybar
+import gobject
+import gtk
+import pygtk
+import repoView
+import search
+import searchCompletion as sc
+import sortedDict
+import subCategorybar
+import utils
+pygtk.require('2.0')
+
+class RepoPage:
+    '''Interface for repository page.'''
+    
+    def __init__(self, repoCache, switchStatus, downloadQueue, entryDetailCallback, 
+                 entrySearchCallback, sendVoteCallback, fetchVoteCallback):
+        '''Init for repository page.'''
+        # Init.
+        self.repoCache = repoCache
+        self.box = gtk.VBox()
+        self.categorybar = categorybar.CategoryBar(self.repoCache.getCategorys(), self.selectCategory)
+        self.contentBox = gtk.HBox()
+        # self.subCategorybar = subCategorybar.SubCategorybar(
+        #     CATE_WEB,
+        #     self.repoCache.getSubcategorys(CATE_WEB),
+        #     self.selectSubCategory
+        #     )
+        # self.topbar = Topbar(SUBCATE_ALL, 
+        #                      self.repoCache.getSubcategoryNumber(CATE_WEB, SUBCATE_ALL),
+        #                      self.repoCache.cache.values())
+        self.topbar = Topbar(
+            CATE_WEB, 
+            self.repoCache.getSubcategoryNumber(CATE_WEB, SUBCATE_ALL),
+            self.repoCache.cache.values(),
+            entrySearchCallback)
+        self.repoView = repoView.RepoView(
+            CATE_WEB, 
+            SUBCATE_ALL, 
+            self.repoCache.getSubcategoryNumber(CATE_WEB, SUBCATE_ALL),
+            self.repoCache.getAppList,
+            switchStatus, 
+            downloadQueue,
+            entryDetailCallback,
+            sendVoteCallback,
+            fetchVoteCallback
+            )
+
+        # Connect components.
+        self.box.pack_start(self.topbar.eventbox, False, False)
+        self.box.pack_start(self.contentBox)
+        self.contentBox.pack_start(self.categorybar.box, False, False)
+        self.contentBox.pack_start(self.repoView.scrolledwindow)
+        self.box.show_all()
+
+    def selectCategory(self, category, subCategory, categoryId):
+        '''Select category.'''
+        self.categorybar.categoryId = categoryId
+        self.categorybar.box.queue_draw()
+        
+        # Update sub category bar.
+        # self.subCategorybar.updateSubCategorybar(
+        #     category,
+        #     self.repoCache.getSubcategorys(category)
+        #     )
+        
+        # Select sub category.
+        self.selectSubCategory(category, subCategory)
+
+    def selectSubCategory(self, category, subCategory):
+        '''Select sub category.'''
+        # Redraw sub-categorybar bar.
+        # self.subCategorybar.frame.queue_draw()
+        
+        # Update top bar.
+        # self.topbar.updateTopbar(
+        #     subCategory, 
+        #     self.repoCache.getSubcategoryNumber(category, subCategory)
+        #     )
+        self.topbar.updateTopbar(
+            category,
+            self.repoCache.getSubcategoryNumber(category, subCategory)
+            )
+        
+        # Update application view.
+        self.repoView.update(
+            category, 
+            subCategory,
+            self.repoCache.getSubcategoryNumber(category, subCategory)
+            )
+
+        # Reset repoView's index.
+        self.repoView.setSelectItemIndex(0)
+
+class Topbar:
+    '''Top bar.'''
+	
+    SEARCH_ENTRY_WIDTH = 300
+    
+    def __init__(self, category, itemNum, appInfos, entrySearchCallback):
+        '''Init for top bar.'''
+        self.paddingX = 5
+        self.box = gtk.HBox()
+        self.boxAlign = gtk.Alignment()
+        self.boxAlign.set(0.0, 0.5, 1.0, 1.0)
+        self.boxAlign.set_padding(0, 0, TOPBAR_PADDING_LEFT, TOPBAR_PADDING_RIGHT)
+        self.boxAlign.add(self.box)
+        self.eventbox = gtk.EventBox()
+        self.eventbox.add(self.boxAlign)
+        drawTopbar(self.eventbox)
+        self.categoryLabel = gtk.Label()
+        self.numLabel = gtk.Label()
+        self.updateTopbar(category, itemNum)
+        self.entrySearchCallback = entrySearchCallback
+
+        # Add sort label.
+        defaultSort = gtk.Label()
+        defaultSort.set_markup("<span foreground='#1A3E88' size='%s'>%s</span>" % (LABEL_FONT_SIZE, "默认排行"))
+
+        downloadSort = gtk.Label()
+        downloadSort.set_markup("<span foreground='#1A3E88' size='%s'>%s</span>" % (LABEL_FONT_SIZE, "按下载量排行"))
+
+        voteSort = gtk.Label()
+        voteSort.set_markup("<span foreground='#1A3E88' size='%s'>%s</span>" % (LABEL_FONT_SIZE, "按评分排行"))
+
+        # Add sort box.
+        sortBox = gtk.HBox()
+        sortBox.pack_start(defaultSort, False, False, self.paddingX)
+        sortBox.pack_start(downloadSort, False, False, self.paddingX)
+        sortBox.pack_start(voteSort, False, False, self.paddingX)
+        sortAlign = gtk.Alignment()
+        sortAlign.set(0.5, 0.5, 0.0, 0.0)
+        sortAlign.add(sortBox)
+
+        # Add search entry and label.
+        (self.searchEntry, searchAlign, self.searchCompletion) = newSearchUI(
+            "请输入你要搜索的软件名称、版本或其他信息",
+            lambda text: utils.getCandidates(map (lambda appInfo: appInfo.pkg.name, appInfos), text),
+            self.clickCandidate,
+            self.search)
+        
+        # Connect widgets.
+        self.box.pack_start(self.categoryLabel, False, False, self.paddingX)
+        self.box.pack_start(self.numLabel, False, False, self.paddingX)
+        self.box.pack_start(sortAlign, True, True, self.paddingX)
+        self.box.pack_start(searchAlign)
+        
+    def search(self, editable):
+        '''Search'''
+        content = self.searchEntry.get_chars(0, -1)
+        keywords = content.split()
+        if len(keywords) != 0:
+            pkgList = search.do_search(keywords)
+            self.entrySearchCallback(PAGE_REPO, content, pkgList)
+        
+    def clickCandidate(self, candidate):
+        '''Click candidate.'''
+        keyword = self.searchEntry.get_chars(0, -1)
+        self.entrySearchCallback(PAGE_REPO, keyword, [candidate])
+        
+    def updateTopbar(self, category, itemNum):
+        '''Set number label.'''
+        self.categoryLabel.set_markup("<span foreground='#00BBBB' size='%s'><b>%s</b></span>" % (LABEL_FONT_SIZE, category))
+        self.numLabel.set_markup(
+            ("<span size='%s'>共</span>" % (LABEL_FONT_SIZE))
+            + "<span foreground='#00BB00' size='%s'> %s</span>" % (LABEL_FONT_SIZE, str(itemNum))
+            + ("<span size='%s'>款软件</span>" % (LABEL_FONT_SIZE)))
+    
--- deepin-software-center-1.0.orig/src/draw.py
+++ deepin-software-center-1.0/src/draw.py
@@ -252,8 +252,10 @@ def navButtonOnExpose(widget, event,
                       hoverImg, pressImg,
                       pageId, getPageId):
     '''Expose function to replace event box's image.'''
+    # Init.
     selectPageId = getPageId()
     
+    # Draw background.
     backgroundPixbuf = gtk.gdk.pixbuf_new_from_file(pressImg)
     backgroundWidth = backgroundPixbuf.get_width()
     backgroundHeight = backgroundPixbuf.get_height()
@@ -283,12 +285,114 @@ def navButtonOnExpose(widget, event,
     drawPixbuf(cr, navPixbuf, 
                x + (backgroundWidth - navWidth) / 2, 
                y)
-    
+
+    # Draw font.
     fontSize = 16
     
     drawFont(cr, navName, fontSize, "#FFFFFF",
              x + backgroundWidth / 2 - fontSize * 2, 
              y + (backgroundHeight + navHeight) / 2)
+
+    if widget.get_child() != None:
+        widget.propagate_expose(widget.get_child(), event)
+
+    return True
+
+def updateButtonSetBackground(
+    widget, 
+    navName, navImg,
+    hoverImg, pressImg,
+    pageId, getPageId, getUpradableNum):
+    '''Set event box's background.'''
+    image = gtk.gdk.pixbuf_new_from_file(hoverImg)
+    requestWidth = image.get_width()
+    requestHeight = image.get_height()
+    widget.set_size_request(requestWidth, requestHeight)
+    
+    widget.connect("expose-event", lambda w, e: updateButtonOnExpose(
+            w, e,
+            navName, navImg,
+            hoverImg, pressImg, 
+            pageId, getPageId, getUpradableNum))
+        
+def updateButtonOnExpose(
+    widget, event, 
+    navName, navImg,
+    hoverImg, pressImg,
+    pageId, getPageId, getUpradableNum):
+    '''Expose function to replace event box's image.'''
+    # Init.
+    selectPageId = getPageId()
+    upgradableNum = getUpradableNum()
+    
+    # Draw background.
+    backgroundPixbuf = gtk.gdk.pixbuf_new_from_file(pressImg)
+    backgroundWidth = backgroundPixbuf.get_width()
+    backgroundHeight = backgroundPixbuf.get_height()
+    
+    if widget.state == gtk.STATE_NORMAL:
+        if selectPageId == pageId:
+            pixbuf = gtk.gdk.pixbuf_new_from_file(pressImg)
+        else:
+            pixbuf = None
+    elif widget.state == gtk.STATE_PRELIGHT:
+        if selectPageId == pageId:
+            pixbuf = gtk.gdk.pixbuf_new_from_file(pressImg)
+        else:
+            pixbuf = gtk.gdk.pixbuf_new_from_file(hoverImg)
+    elif widget.state == gtk.STATE_ACTIVE:
+        pixbuf = gtk.gdk.pixbuf_new_from_file(pressImg)
+    
+    x, y = widget.allocation.x, widget.allocation.y
+    
+    cr = widget.window.cairo_create()
+    
+    drawPixbuf(cr, pixbuf, x, y)
+
+    navPixbuf = gtk.gdk.pixbuf_new_from_file(navImg)
+    navWidth = navPixbuf.get_width()
+    navHeight = navPixbuf.get_height()
+    drawPixbuf(cr, navPixbuf, 
+               x + (backgroundWidth - navWidth) / 2, 
+               y)
+    
+    # Draw upgradable number.
+    if upgradableNum > 0 and upgradableNum < 100000:
+        # Init.
+        numBgLeftPixbuf = gtk.gdk.pixbuf_new_from_file("./icons/navigate/notify_bg_left.png")
+        numBgMiddlePixbuf = gtk.gdk.pixbuf_new_from_file("./icons/navigate/notify_bg_middle.png")
+        numBgRightPixbuf = gtk.gdk.pixbuf_new_from_file("./icons/navigate/notify_bg_right.png")
+        numPixbuf = gtk.gdk.pixbuf_new_from_file("./icons/navigate/0.png")
+        numBgLeftWidth = numBgLeftPixbuf.get_width()      
+        numBgLeftHeight = numBgLeftPixbuf.get_height()    
+        numWidth = numPixbuf.get_width()                  
+        numHeight = numPixbuf.get_height()                
+        numLen = len(str(upgradableNum))        
+        numX = x + backgroundWidth - numBgLeftWidth * 2 - numLen * numWidth - 10
+        numY = y + 10
+        
+        # Draw number background.
+        drawPixbuf(cr, numBgLeftPixbuf, numX, numY)
+        drawPixbuf(cr, numBgMiddlePixbuf.scale_simple(numLen * numWidth, numBgLeftHeight, gtk.gdk.INTERP_BILINEAR),
+                   numX + numBgLeftWidth, numY)
+        drawPixbuf(cr, numBgRightPixbuf, 
+                   numX + numBgLeftWidth + numLen * numWidth, numY)
+        
+        # Draw number.
+        for (i, c) in enumerate(str(upgradableNum)):
+            numPixbuf = gtk.gdk.pixbuf_new_from_file("./icons/navigate/%s.png" % c)
+            drawPixbuf(cr, numPixbuf,
+                       numX + numBgLeftWidth + i * numWidth,
+                       numY + (numBgLeftHeight - numHeight) / 2)
+    elif upgradableNum != 0:
+        print "Upgradable number out of bound (1 ~ 100000): %s" % (upgradableNum)
+    
+    # Draw font.
+    fontSize = 16
+
+    drawFont(cr, navName, fontSize, "#FFFFFF",
+             x + backgroundWidth / 2 - fontSize * 2, 
+             y + (backgroundHeight + navHeight) / 2)
 
     if widget.get_child() != None:
         widget.propagate_expose(widget.get_child(), event)
--- deepin-software-center-1.0.orig/src/appItem.py
+++ deepin-software-center-1.0/src/appItem.py
@@ -35,7 +35,6 @@ class UninstallItem:
     '''Application item.'''
     
     ITEM_PADDING = 5
-    ALIGN_BOX_WIDTH = 200
     PROGRESS_WIDTH = 170
     PROGRESS_HEIGHT = 3
     MAX_CHARS = 50
@@ -79,7 +78,7 @@ class UninstallItem:
         self.itemFrame.set(0.0, 0.5, 1.0, 1.0)
         self.itemFrame.add(self.itemEventBox)
         
-        self.appBasicBox = createItemBasicBox(self.appInfo, 480)
+        self.appBasicBox = createItemBasicBox(self.appInfo, 200, self.itemBox)
         self.itemBox.pack_start(self.appBasicBox, True, True, self.APP_LEFT_PADDING_X)
         
         self.appAdditionBox = gtk.HBox()
@@ -140,11 +139,10 @@ class UninstallItem:
             appUninstallLabel.set_markup("<span size='%s'>%s</span>" % (LABEL_FONT_SIZE, "你确定要卸载吗？"))
             actionButtonBox.pack_start(appUninstallLabel, False, False)
             
-            appUninstallPaddingY = 5
             appUninstallBox = gtk.HBox()
             appUninstallAlign = gtk.Alignment()
             appUninstallAlign.set(0.5, 0.5, 1.0, 1.0)
-            appUninstallAlign.set_padding(appUninstallPaddingY, 0, 0, 0)
+            appUninstallAlign.set_padding(ACTION_BUTTON_PADDING_Y, ACTION_BUTTON_PADDING_Y, 0, 0)
             appUninstallAlign.add(appUninstallBox)
             actionButtonBox.pack_start(appUninstallAlign, False, False)
             
@@ -220,7 +218,6 @@ def createActionButton():
 class DownloadItem:
     '''Application item.'''
     PROGRESS_WIDTH = 170
-    ALIGN_BOX_WIDTH = 200
     APP_RIGHT_PADDING_X = 20
     PROGRESS_LABEL_WIDTH_CHARS = 25
     BUTTON_PADDING_X = 4
@@ -248,30 +245,36 @@ class DownloadItem:
         appAdditionBox.pack_start(progressbar.box)
         
         # Alignment box.
-        alignBox = gtk.HBox()
-        alignBox.set_size_request(self.ALIGN_BOX_WIDTH, -1)
-        appAdditionBox.pack_start(alignBox, False, False, self.APP_RIGHT_PADDING_X)
-        
-        # Add feedback label.
-        feedbackLabel = gtk.Label()
-        feedbackLabel.set_markup("<span size='%s'>%s</span>" % (LABEL_FONT_SIZE, self.appInfo.downloadingFeedback))
-        feedbackLabel.set_width_chars(self.PROGRESS_LABEL_WIDTH_CHARS)
-        feedbackLabel.set_ellipsize(pango.ELLIPSIZE_END)
-        feedbackLabel.set_alignment(0.0, 0.5)
-        self.downloadingFeedbackLabel = feedbackLabel
-        alignBox.pack_start(feedbackLabel)
+        (actionBox, actionAlign) = createActionButton()
+        appAdditionBox.pack_start(actionAlign)
         
         # Add pause icon.
+        buttonBox = gtk.HBox()
+        buttonAlign = gtk.Alignment()
+        buttonAlign.set(0.5, 0.5, 0.0, 0.0)
+        buttonAlign.set_padding(ACTION_BUTTON_PADDING_Y, ACTION_BUTTON_PADDING_Y, 0, 0)
+        buttonAlign.add(buttonBox)
+        actionBox.pack_start(buttonAlign)
+        
         pauseIcon = gtk.Button()
         drawSimpleButton(pauseIcon, "pause")
         pauseIcon.connect("button-release-event", lambda widget, event: self.switchToDownloadPause())
-        alignBox.pack_start(pauseIcon, False, False, self.BUTTON_PADDING_X)
+        buttonBox.pack_start(pauseIcon, False, False, self.BUTTON_PADDING_X)
         
         # Add stop icon.
         stopIcon = gtk.Button()
         drawSimpleButton(stopIcon, "stop")
         stopIcon.connect("button-release-event", lambda widget, event: self.switchToNormal())
-        alignBox.pack_start(stopIcon, False, False, self.BUTTON_PADDING_X)
+        buttonBox.pack_start(stopIcon, False, False, self.BUTTON_PADDING_X)
+        
+        # Add feedback label.
+        feedbackLabel = gtk.Label()
+        feedbackLabel.set_markup("<span size='%s'>%s</span>" % (LABEL_FONT_SIZE, self.appInfo.downloadingFeedback))
+        feedbackLabel.set_width_chars(self.PROGRESS_LABEL_WIDTH_CHARS)
+        feedbackLabel.set_ellipsize(pango.ELLIPSIZE_END)
+        feedbackLabel.set_alignment(0.5, 0.5)
+        self.downloadingFeedbackLabel = feedbackLabel
+        actionBox.pack_start(feedbackLabel)
         
     def initDownloadPauseStatus(self, appAdditionBox):
         '''Init download pause status.'''
@@ -285,28 +288,35 @@ class DownloadItem:
         appAdditionBox.pack_start(progressbar.box)
         
         # Alignment box.
-        alignBox = gtk.HBox()
-        alignBox.set_size_request(self.ALIGN_BOX_WIDTH, -1)
-        appAdditionBox.pack_start(alignBox, False, False, self.APP_RIGHT_PADDING_X)
-        
-        # Add pause label.
-        pauseLabel = gtk.Label()
-        pauseLabel.set_markup("<span size='%s'>%s</span>" % (LABEL_FONT_SIZE, "暂停"))
-        pauseLabel.set_width_chars(self.PROGRESS_LABEL_WIDTH_CHARS)
-        pauseLabel.set_ellipsize(pango.ELLIPSIZE_END)
-        alignBox.pack_start(pauseLabel)
+        (actionBox, actionAlign) = createActionButton()
+        appAdditionBox.pack_start(actionAlign)
         
         # Add play icon.
+        buttonBox = gtk.HBox()
+        buttonAlign = gtk.Alignment()
+        buttonAlign.set(0.5, 0.5, 0.0, 0.0)
+        buttonAlign.set_padding(ACTION_BUTTON_PADDING_Y, ACTION_BUTTON_PADDING_Y, 0, 0)
+        buttonAlign.add(buttonBox)
+        actionBox.pack_start(buttonAlign)
+        
         continueIcon = gtk.Button()
         drawSimpleButton(continueIcon, "continue")
         continueIcon.connect("button-release-event", lambda widget, event: self.switchToDownloading())
-        alignBox.pack_start(continueIcon, False, False, self.BUTTON_PADDING_X)
+        buttonBox.pack_start(continueIcon, False, False, self.BUTTON_PADDING_X)
         
         # Add stop icon.
         stopIcon = gtk.Button()
         drawSimpleButton(stopIcon, "stop")
         stopIcon.connect("button-release-event", lambda widget, event: self.switchToNormal())
-        alignBox.pack_start(stopIcon, False, False, self.BUTTON_PADDING_X)
+        buttonBox.pack_start(stopIcon, False, False, self.BUTTON_PADDING_X)
+        
+        # Add pause label.
+        pauseLabel = gtk.Label()
+        pauseLabel.set_markup("<span size='%s'>%s</span>" % (LABEL_FONT_SIZE, "暂停"))
+        pauseLabel.set_width_chars(self.PROGRESS_LABEL_WIDTH_CHARS)
+        pauseLabel.set_ellipsize(pango.ELLIPSIZE_END)
+        pauseLabel.set_alignment(0.5, 0.5)
+        actionBox.pack_start(pauseLabel)
         
     def initInstallingStatus(self):
         '''Init installing status.'''
@@ -376,7 +386,7 @@ class DownloadItem:
                 
                 self.itemFrame.show_all()
                 
-def createItemBasicBox(appInfo, maxWidth, showVersion=True):
+def createItemBasicBox(appInfo, maxWidth, parent, showVersion=True):
     '''Create item information.'''
     # Init.
     appBasicAlign = gtk.Alignment()
@@ -400,24 +410,36 @@ def createItemBasicBox(appInfo, maxWidth
     # Add application name.
     pkgName = utils.getPkgName(pkg)
     appName = gtk.Label()
-    if showVersion:
-        pkgVersion = utils.getPkgVersion(pkg)
-        markup = "<span foreground='#1A3E88' size='%s'>%s</span><span foreground='#00BB00' size='%s'> (%s)</span>" % (LABEL_FONT_SIZE, pkgName, LABEL_FONT_SIZE, pkgVersion)
-    else:
-        markup = "<span foreground='#1A3E88' size='%s'>%s</span>" % (LABEL_FONT_SIZE, pkgName)
-    appName.set_markup(markup)
-    appName.set_size_request(maxWidth, -1)
+    parent.connect("size-allocate", 
+                   lambda w, e: adjustLabelWidth(parent, 
+                                                 appName,
+                                                 LABEL_FONT_SIZE / 1000,
+                                                 maxWidth))
+    
     appName.set_single_line_mode(True)
     appName.set_ellipsize(pango.ELLIPSIZE_END)
     appName.set_alignment(0.0, 0.5)
     appBox.pack_start(appName, False, False)
     
+    pkgVersion = utils.getPkgVersion(pkg)
+    nameMarkup = "<span foreground='#1A3E88' size='%s'>%s</span>" % (LABEL_FONT_SIZE, pkgName)
+    versionMarkup = "<span foreground='#00BB00' size='%s'> (%s)</span>" % (LABEL_FONT_SIZE, pkgVersion)
+    if showVersion:
+        appName.set_markup(nameMarkup + versionMarkup)
+    else:
+        appName.set_markup(nameMarkup)
+    
     # Add application summary.
     summary = utils.getPkgShortDesc(pkg)
     appSummaryBox = gtk.HBox()
     appSummary = gtk.Label()
     appSummary.set_markup("<span foreground='#000000' size='%s'>%s</span>" % (LABEL_FONT_SIZE, summary))
-    appSummary.set_size_request(maxWidth, -1)
+    parent.connect("size-allocate", 
+                   lambda w, e: adjustLabelWidth(parent, 
+                                                 appSummary,
+                                                 LABEL_FONT_SIZE / 1000,
+                                                 maxWidth))
+    
     appSummary.set_single_line_mode(True)
     appSummary.set_ellipsize(pango.ELLIPSIZE_END)
     appSummary.set_alignment(0.0, 0.5)
@@ -426,6 +448,10 @@ def createItemBasicBox(appInfo, maxWidth
     
     return appBasicAlign
 
+def adjustLabelWidth(parent, label, fontWidth, adjustWidth):
+    '''Adjust label width.'''
+    label.set_width_chars((parent.allocation.width - adjustWidth) / fontWidth)
+
 def createAppIcon(pkg, size=32, alignLeft=5, alignRight=5, alignTop=5, alignBottom=5):
     '''Create application icon.'''
     appIcon = utils.getPkgIcon(pkg, size, size)
@@ -460,7 +486,6 @@ class VoteView:
         self.focusStatus = self.FOCUS_INIT
         # self.focusStatus = self.FOCUS_NORMAL
         self.starSize = 16
-        self.leaveNotifyHandleId = None
         self.starView = None
         
         self.box = gtk.VBox()
@@ -530,28 +555,46 @@ class VoteView:
         
         self.starBox.pack_start(starBox)
         
-        voteLabel = gtk.Label()
-        voteLabel.set_markup("<span foreground='#1A3E88' size='%s'>评分</span>" % (LABEL_FONT_SIZE))
-        voteEventBox = gtk.EventBox()
-        voteEventBox.set_visible_window(False)
-        voteEventBox.add(voteLabel)
-        voteEventBox.connect("button-press-event", lambda w, e: self.switchFocusStatus(self.FOCUS_STAR))
-        self.voteBox.pack_start(voteEventBox)
-        
-        rate = gtk.Label()
-        if self.voteNum == 0:
-            rate.set_markup("<span foreground='#1A3E88' size='%s'>抢沙发!</span>" % (LABEL_FONT_SIZE))
-        else:
-            rate.set_markup("<span foreground='#1A3E88' size='%s'>%s 评论</span>" % (LABEL_FONT_SIZE, self.voteNum))
-        rateEventBox = gtk.EventBox()
-        rateEventBox.set_visible_window(False)
-        rateEventBox.add(rate)
-        rateEventBox.connect("button-press-event", 
+        self.voteLabel = gtk.Label()
+        self.voteLabel.set_markup("<span foreground='#1A3E88' size='%s'>评分</span>" % (LABEL_FONT_SIZE))
+        self.voteEventBox = gtk.EventBox()
+        self.voteEventBox.set_visible_window(False)
+        self.voteEventBox.add(self.voteLabel)
+        self.voteEventBox.connect("button-press-event", lambda w, e: self.switchFocusStatus(self.FOCUS_STAR))
+        self.voteBox.pack_start(self.voteEventBox)
+        utils.setClickableLabel(
+            self.voteEventBox,
+            self.voteLabel,
+            "<span foreground='#1A3E88' size='%s'>评分</span>" % (LABEL_FONT_SIZE),
+            "<span foreground='#0084FF' size='%s'>评分</span>" % (LABEL_FONT_SIZE))
+        
+        self.rate = gtk.Label()
+        self.rateEventBox = gtk.EventBox()
+        self.rateEventBox.set_visible_window(False)
+        self.rateEventBox.add(self.rate)
+        self.rateEventBox.connect("button-press-event", 
                              lambda w, e: self.entryDetailCallback(self.pageId, self.appInfo))
         rateAlign = gtk.Alignment()
         rateAlign.set(1.0, 0.5, 0.0, 0.0)
-        rateAlign.add(rateEventBox)
+        rateAlign.add(self.rateEventBox)
         self.voteBox.pack_start(rateAlign)
+        
+        if self.voteNum == 0:
+            self.rate.set_markup("<span foreground='#1A3E88' size='%s'>抢沙发!</span>" % (LABEL_FONT_SIZE))
+            
+            utils.setClickableLabel(
+                self.rateEventBox,
+                self.rate,
+                "<span foreground='#1A3E88' size='%s'>抢沙发!</span>" % (LABEL_FONT_SIZE),
+                "<span foreground='#0084FF' size='%s'>抢沙发!</span>" % (LABEL_FONT_SIZE))
+        else:
+            self.rate.set_markup("<span foreground='#1A3E88' size='%s'>%s 评论</span>" % (LABEL_FONT_SIZE, self.voteNum))
+            
+            utils.setClickableLabel(
+                self.rateEventBox,
+                self.rate,
+                "<span foreground='#1A3E88' size='%s'>%s 评论</span>" % (LABEL_FONT_SIZE, self.voteNum),
+                "<span foreground='#0084FF' size='%s'>%s 评论</span>" % (LABEL_FONT_SIZE, self.voteNum))
 
     def drawFocusInit(self):
         '''Draw focus out.'''
@@ -632,8 +675,6 @@ def initActionStatus(appAdditionBox, pro
     '''Init action status.'''
     APP_RIGHT_PADDING_X = 20
     PROGRESS_WIDTH = 170
-    # ALIGN_BOX_WIDTH = 200
-    ALIGN_BOX_WIDTH = 60
     
     # Clean right box first.
     utils.containerRemoveAll(appAdditionBox)
@@ -645,14 +686,14 @@ def initActionStatus(appAdditionBox, pro
     
     # Alignment box.
     alignBox = gtk.HBox()
-    alignBox.set_size_request(ALIGN_BOX_WIDTH, -1)
-    appAdditionBox.pack_start(alignBox, False, False, APP_RIGHT_PADDING_X)
+    alignBox.set_size_request(ACTION_BUTTON_WIDTH, -1)
+    appAdditionBox.pack_start(alignBox, False, False, ACTION_BUTTON_PADDING_X)
     
     # Add feedback label.
     feedbackLabel = gtk.Label()
     feedbackLabel.set_markup("<span size='%s'>%s</span>" % (LABEL_FONT_SIZE, feedback))
     feedbackLabel.set_ellipsize(pango.ELLIPSIZE_END)
-    feedbackLabel.set_alignment(0.0, 0.5)
+    feedbackLabel.set_alignment(0.5, 0.5)
     alignBox.pack_start(feedbackLabel)
     
     return (progressbar, feedbackLabel)
--- deepin-software-center-1.0.orig/src/deepin-software-center.py
+++ deepin-software-center-1.0/src/deepin-software-center.py
@@ -22,6 +22,7 @@
 from constant import *
 from draw import *
 from utils import postGUI
+from tooltips import *
 import action
 import apt
 import apt_pkg
@@ -34,9 +35,10 @@ import navigatebar
 import pango
 import pangocairo
 import pygtk
+import morePage
 import recommendPage
 import repoCache
-import repositoryPage
+import repoPage
 import search
 import searchPage
 import searchUninstallPage as sp
@@ -70,6 +72,7 @@ class DeepinSoftwareCenter:
         apt_pkg.init_config()
         apt_pkg.init_system()
         self.aptCache = apt.Cache()
+        self.repoCache = repoCache.RepoCache(self.aptCache)
         self.detailViewDict = {}
         self.searchViewDict = {}
         self.noscreenshotList = []
@@ -79,13 +82,15 @@ class DeepinSoftwareCenter:
             self.downloadUpdateCallback,
             self.downloadFinishCallback,
             self.downloadFailedCallback,
+            self.message
             )
         
         # Action queue.
         self.actionQueue = action.ActionQueue(
             self.actionUpdateCallback,
             self.actionFinishCallback,
-            self.actionFailedCallback
+            self.actionFailedCallback,
+            self.message
             )
         
         # Init widgets.
@@ -109,17 +114,16 @@ class DeepinSoftwareCenter:
                             lambda w, e: utils.moveWindow(w, e, self.window))
         self.topbar.connect("button-press-event", self.doubleClickWindow)
         self.titlebar = titlebar.Titlebar(self.minWindow, self.toggleWindow, self.closeWindow)
-        self.navigatebar = navigatebar.NavigateBar()
+        self.navigatebar = navigatebar.NavigateBar(self.repoCache)
         self.bodyBox = gtk.HBox()
         self.contentBox = gtk.VBox()
-        self.repoCache = repoCache.RepoCache(self.aptCache)
         self.recommendPage = recommendPage.RecommendPage(
             self.repoCache, 
             self.switchStatus,
             self.downloadQueue,
             self.entryDetailView,
             )
-        self.repositoryPage = repositoryPage.RepositoryPage(
+        self.repoPage = repoPage.RepoPage(
             self.repoCache, 
             self.switchStatus,
             self.downloadQueue,
@@ -145,11 +149,21 @@ class DeepinSoftwareCenter:
             self.fetchVote,
             )
         self.communityPage = communityPage.CommunityPage()
-        # self.morePage = morePage.MorePage()
+        self.morePage = morePage.MorePage()
         self.statusbar = statusbar.Statusbar()
         self.statusbar.eventbox.connect("button-press-event", lambda w, e: utils.resizeWindow(w, e, self.window))
         self.statusbar.eventbox.connect("button-press-event", lambda w, e: utils.moveWindow(w, e, self.window))
         
+        self.window.connect_after("show", lambda w: self.createTooltips())
+        
+    def createTooltips(self):
+        '''Create tooltips.'''
+        self.tooltips = Tooltips(self.window, self.statusbar.eventbox)    
+        
+    def message(self, message):
+        '''Show message.'''
+        self.tooltips.start(message)    
+        
     def updateShape(self, widget, allocation):
         '''Update shape.'''
         if allocation.width > 0 and allocation.height > 0:
@@ -177,7 +191,7 @@ class DeepinSoftwareCenter:
         recommendView.switchToStatus(pkgName, appStatus)
         
         # Update repo view.
-        repoView = self.repositoryPage.repoView
+        repoView = self.repoPage.repoView
         repoView.switchToStatus(pkgName, appStatus)
         
         # Update application view.
@@ -206,7 +220,7 @@ class DeepinSoftwareCenter:
             recommendView.updateDownloadingStatus(pkgName, progress, feedback)
             
             # Update repo view.
-            repoView = self.repositoryPage.repoView
+            repoView = self.repoPage.repoView
             repoView.updateDownloadingStatus(pkgName, progress, feedback)
             
             # Update application view.
@@ -241,7 +255,7 @@ class DeepinSoftwareCenter:
             recommendView.switchToStatus(pkgName, appStatus)
                 
             # Update repo view.
-            repoView = self.repositoryPage.repoView
+            repoView = self.repoPage.repoView
             repoView.switchToStatus(pkgName, appStatus)
                 
             # Update update view.
@@ -281,12 +295,12 @@ class DeepinSoftwareCenter:
             recommendView.switchToStatus(pkgName, appStatus)
                 
             # Update repo view.
-            repoView = self.repositoryPage.repoView
-            repoView.switchToStatus(pkgName, appStatus)
+            repoView = self.repoPage.repoView
+            repoView.switchToStatus(pkgName, appStatus, True)
                 
             # Update update view.
             updateView = self.updatePage.updateView
-            updateView.switchToStatus(pkgName, appStatus)
+            updateView.switchToStatus(pkgName, appStatus, True)
                 
             # Update detail view.
             for pageId in [PAGE_RECOMMEND, PAGE_REPO, PAGE_UPGRADE, PAGE_UNINSTALL]:
@@ -295,7 +309,7 @@ class DeepinSoftwareCenter:
                     detailView.switchToStatus(pkgName, appStatus)
                 elif pageId == PAGE_REPO and self.searchViewDict.has_key(pageId):
                     searchView = self.searchViewDict[pageId].searchView
-                    searchView.switchToStatus(pkgName, appStatus)
+                    searchView.switchToStatus(pkgName, appStatus, True)
         else:
             print "Impossible: %s not in RepoCache" % (pkgName)
             
@@ -313,7 +327,7 @@ class DeepinSoftwareCenter:
                 recommendView.updateInstallingStatus(pkgName, progress, feedback)
                     
                 # Update repo view.
-                repoView = self.repositoryPage.repoView
+                repoView = self.repoPage.repoView
                 repoView.updateInstallingStatus(pkgName, progress, feedback)
                 
                 # Update detail view.
@@ -334,7 +348,7 @@ class DeepinSoftwareCenter:
                 recommendView.updateUpgradingStatus(pkgName, progress, feedback)
                     
                 # Update repo view.
-                repoView = self.repositoryPage.repoView
+                repoView = self.repoPage.repoView
                 repoView.updateUpgradingStatus(pkgName, progress, feedback)
                     
                 # Update update view.
@@ -387,8 +401,8 @@ class DeepinSoftwareCenter:
                     recommendView.initNormalStatus(pkgName, isMarkDeleted)
                     
                     # Update repo view.
-                    repoView = self.repositoryPage.repoView
-                    repoView.initNormalStatus(pkgName, isMarkDeleted)
+                    repoView = self.repoPage.repoView
+                    repoView.initNormalStatus(pkgName, isMarkDeleted, True)
                     
                     # Update detail view.
                     for pageId in [PAGE_RECOMMEND, PAGE_REPO, PAGE_UPGRADE, PAGE_UNINSTALL]:
@@ -397,7 +411,7 @@ class DeepinSoftwareCenter:
                             detailView.initNormalStatus(pkgName, isMarkDeleted)
                         elif pageId == PAGE_REPO and self.searchViewDict.has_key(pageId):
                             searchView = self.searchViewDict[pageId].searchView
-                            searchView.initNormalStatus(pkgName, isMarkDeleted)
+                            searchView.initNormalStatus(pkgName, isMarkDeleted, True)
                         
                     # Add in uninstall list.
                     self.updateUninstallView(pkgName, not isMarkDeleted)
@@ -412,22 +426,28 @@ class DeepinSoftwareCenter:
                         appInfo.switchStatus(APP_STATE_NORMAL)
                     else:
                         appInfo.switchStatus(APP_STATE_INSTALLED)
-                        
+
+                        # Remove upgradabled packages.
                         self.repoCache.removePkgFromUpgradableList(pkgName)
                         
+                        # Update topbar.
                         pkgNum = len(self.repoCache.upgradablePkgs)
                         self.updatePage.topbar.updateNum(pkgNum)
                         
+                        # Update update view.
                         updateView = self.updatePage.updateView
                         updateView.update(pkgNum)
                         
+                        # Update notify number.
+                        self.navigatebar.updateIcon.queue_draw()
+                        
                     # Update recommend view.
                     recommendView = self.recommendPage.recommendView
                     recommendView.initNormalStatus(pkgName, isMarkDeleted)
                     
                     # Update repo view.
-                    repoView = self.repositoryPage.repoView
-                    repoView.initNormalStatus(pkgName, isMarkDeleted)
+                    repoView = self.repoPage.repoView
+                    repoView.initNormalStatus(pkgName, isMarkDeleted, True)
                     
                     # Update detail view.
                     for pageId in [PAGE_RECOMMEND, PAGE_REPO, PAGE_UPGRADE, PAGE_UNINSTALL]:
@@ -436,7 +456,7 @@ class DeepinSoftwareCenter:
                             detailView.initNormalStatus(pkgName, isMarkDeleted)
                         elif pageId == PAGE_REPO and self.searchViewDict.has_key(pageId):
                             searchView = self.searchViewDict[pageId].searchView
-                            searchView.initNormalStatus(pkgName, isMarkDeleted)
+                            searchView.initNormalStatus(pkgName, isMarkDeleted, True)
                         
                     # Add in uninstall list.
                     self.updateUninstallView(pkgName, not isMarkDeleted)
@@ -456,8 +476,8 @@ class DeepinSoftwareCenter:
                     recommendView.initNormalStatus(pkgName, isMarkDeleted)
                     
                     # Update repo view.
-                    repoView = self.repositoryPage.repoView
-                    repoView.initNormalStatus(pkgName, isMarkDeleted)
+                    repoView = self.repoPage.repoView
+                    repoView.initNormalStatus(pkgName, isMarkDeleted, True)
                     
                     # Update detail view.
                     for pageId in [PAGE_RECOMMEND, PAGE_REPO, PAGE_UPGRADE, PAGE_UNINSTALL]:
@@ -484,8 +504,8 @@ class DeepinSoftwareCenter:
                 recommendView.initNormalStatus(pkgName, True)
                 
                 # Update repo view.
-                repoView = self.repositoryPage.repoView
-                repoView.initNormalStatus(pkgName, True)
+                repoView = self.repoPage.repoView
+                repoView.initNormalStatus(pkgName, True, True)
                 
                 # Update detail view.
                 for pageId in [PAGE_RECOMMEND, PAGE_REPO, PAGE_UPGRADE, PAGE_UNINSTALL]:
@@ -494,7 +514,7 @@ class DeepinSoftwareCenter:
                         detailView.initNormalStatus(pkgName, True)
                     elif pageId == PAGE_REPO and self.searchViewDict.has_key(pageId):
                         searchView = self.searchViewDict[pageId].searchView
-                        searchView.initNormalStatus(pkgName, True)
+                        searchView.initNormalStatus(pkgName, True, True)
             else:
                 print "Impossible: %s not in RepoCache" % (pkgName)
         elif actionType == ACTION_UPGRADE:
@@ -508,12 +528,12 @@ class DeepinSoftwareCenter:
                 recommendView.switchToStatus(pkgName, APP_STATE_UPGRADE)
                 
                 # Update repo view.
-                repoView = self.repositoryPage.repoView
-                repoView.switchToStatus(pkgName, APP_STATE_UPGRADE)
+                repoView = self.repoPage.repoView
+                repoView.switchToStatus(pkgName, APP_STATE_UPGRADE, True)
                 
                 # Update update view.
                 updateView = self.updatePage.updateView
-                updateView.switchToStatus(pkgName, APP_STATE_UPGRADE)
+                updateView.switchToStatus(pkgName, APP_STATE_UPGRADE, True)
                 
                 # Update detail view.
                 for pageId in [PAGE_RECOMMEND, PAGE_REPO, PAGE_UPGRADE, PAGE_UNINSTALL]:
@@ -522,7 +542,7 @@ class DeepinSoftwareCenter:
                         detailView.switchToStatus(pkgName, APP_STATE_UPGRADE)
                     elif pageId == PAGE_REPO and self.searchViewDict.has_key(pageId):
                         searchView = self.searchViewDict[pageId].searchView
-                        searchView.switchToStatus(pkgName, APP_STATE_UPGRADE)
+                        searchView.switchToStatus(pkgName, APP_STATE_UPGRADE, True)
             else:
                 print "Impossible: %s not in RepoCache" % (pkgName)
         elif actionType == ACTION_UNINSTALL:
@@ -533,7 +553,7 @@ class DeepinSoftwareCenter:
                 
                 # Update uninstall view.
                 uninstallView = self.uninstallPage.uninstallView
-                uninstallView.initUninstallStatus(pkgName)
+                uninstallView.initUninstallStatus(pkgName, True)
                 
                 # Update detail view.
                 for pageId in [PAGE_RECOMMEND, PAGE_REPO, PAGE_UPGRADE, PAGE_UNINSTALL]:
@@ -542,7 +562,7 @@ class DeepinSoftwareCenter:
                         detailView.initNormalStatus(pkgName, False)
                     elif pageId == PAGE_UNINSTALL and self.searchViewDict.has_key(pageId):
                         searchView = self.searchViewDict[pageId].searchView
-                        searchView.initUninstallStatus(pkgName)
+                        searchView.initUninstallStatus(pkgName, True)
             else:
                 print "Impossible: %s not in RepoCache" % (pkgName)
                 
@@ -639,9 +659,9 @@ class DeepinSoftwareCenter:
         self.navigatebar.communityIcon.connect(
             "button-press-event", 
             lambda widget, event: self.selectPage(PAGE_COMMUNITY))
-        # self.navigatebar.moreIcon.connect(
-        #     "button-press-event", 
-        #     lambda widget, event: self.selectPage(PAGE_MORE))
+        self.navigatebar.moreIcon.connect(
+            "button-press-event", 
+            lambda widget, event: self.selectPage(PAGE_MORE))
         
         # Default select recommend page.
         self.selectPage(PAGE_RECOMMEND)
@@ -676,15 +696,15 @@ class DeepinSoftwareCenter:
             if pageId == PAGE_RECOMMEND:
                 child = self.recommendPage.scrolledwindow
             elif pageId == PAGE_REPO:
-                child = self.repositoryPage.box
+                child = self.repoPage.box
             elif pageId == PAGE_UPGRADE:
                 child = self.updatePage.box
             elif pageId == PAGE_UNINSTALL:
                 child = self.uninstallPage.box
             elif pageId == PAGE_COMMUNITY:
                 child = self.communityPage.box
-            # else: 
-            #     child = self.morePage.box
+            else: 
+                child = self.morePage.box
         
         self.contentBox.pack_start(child)
         self.contentBox.show_all()
@@ -693,7 +713,7 @@ class DeepinSoftwareCenter:
         '''Entry detail view.'''
         view = detailView.DetailView(
             self.aptCache, pageId, appInfo, self.switchStatus, self.downloadQueue, self.actionQueue,
-            self.exitDetailView, self.noscreenshotList, self.updateMoreComment)
+            self.exitDetailView, self.noscreenshotList, self.updateMoreComment, self.message)
         self.detailViewDict[pageId] = view
         
         # Fetch detail thread.
@@ -754,7 +774,7 @@ class DeepinSoftwareCenter:
                 if self.searchViewDict.has_key(pageId):
                     view = self.searchViewDict[pageId].searchView
             else:
-                view = self.repositoryPage.repoView
+                view = self.repoPage.repoView
                 
         elif pageId == PAGE_UPGRADE:
             view = self.updatePage.updateView
@@ -789,7 +809,7 @@ class DeepinSoftwareCenter:
 class FetchVote(td.Thread):
     '''Fetch vote.'''
 	
-    def __init__(self, pageId, appList, updateVoteCallback, isSearchPage):
+    def __init__(self, pageId, pkgNames, updateVoteCallback, isSearchPage):
         '''Init for fetch vote.'''
         td.Thread.__init__(self)
         self.setDaemon(True) # make thread exit when main program exit 
@@ -799,8 +819,8 @@ class FetchVote(td.Thread):
         self.updateVoteCallback = updateVoteCallback
         
         self.pkgArguments = ""
-        for appInfo in appList:
-            self.pkgArguments += utils.getPkgName(appInfo.pkg) + ","
+        for pkgName in pkgNames:
+            self.pkgArguments += pkgName + ","
         self.pkgArguments = self.pkgArguments.rstrip(",") # remove last , from arguments
         
     def run(self):
--- deepin-software-center-1.0.orig/src/searchView.py
+++ deepin-software-center-1.0/src/searchView.py
@@ -61,11 +61,7 @@ class SearchItem(DownloadItem):
         self.itemFrame = gtk.Alignment()
         self.itemFrame.set(0.0, 0.5, 1.0, 1.0)
         
-        self.appBasicBox = createItemBasicBox(self.appInfo, 300)
-        
-        self.appAdditionBox = gtk.HBox()
-        self.appAdditionAlign = gtk.Alignment()
-        self.appAdditionAlign.set(1.0, 0.5, 0.0, 0.0)
+        self.appBasicBox = createItemBasicBox(self.appInfo, 200, self.itemBox)
         
         # Widget that status will change.
         self.installingProgressbar = None
@@ -77,6 +73,9 @@ class SearchItem(DownloadItem):
         # Connect components.
         self.itemBox.pack_start(self.appBasicBox, True, True, self.APP_LEFT_PADDING_X)
         
+        self.appAdditionBox = gtk.HBox()
+        self.appAdditionAlign = gtk.Alignment()
+        self.appAdditionAlign.set(1.0, 0.5, 0.0, 0.0)
         self.appAdditionAlign.add(self.appAdditionBox)
         self.itemBox.pack_start(self.appAdditionAlign, False, False)
         
--- deepin-software-center-1.0.orig/src/repoView.py
+++ deepin-software-center-1.0/src/repoView.py
@@ -63,11 +63,7 @@ class RepoItem(DownloadItem):
         self.itemFrame = gtk.Alignment()
         self.itemFrame.set(0.0, 0.5, 1.0, 1.0)
         
-        self.appBasicBox = createItemBasicBox(self.appInfo, 250)
-        
-        self.appAdditionBox = gtk.HBox()
-        self.appAdditionAlign = gtk.Alignment()
-        self.appAdditionAlign.set(1.0, 0.5, 0.0, 0.0)
+        self.appBasicBox = createItemBasicBox(self.appInfo, 200, self.itemBox)
         
         # Widget that status will change.
         self.installingProgressbar = None
@@ -79,6 +75,9 @@ class RepoItem(DownloadItem):
         # Connect components.
         self.itemBox.pack_start(self.appBasicBox, True, True, self.APP_LEFT_PADDING_X)
         
+        self.appAdditionBox = gtk.HBox()
+        self.appAdditionAlign = gtk.Alignment()
+        self.appAdditionAlign.set(1.0, 0.5, 0.0, 0.0)
         self.appAdditionAlign.add(self.appAdditionBox)
         self.itemBox.pack_start(self.appAdditionAlign, False, False)
         
@@ -219,7 +218,9 @@ class RepoView(appView.AppView):
             self.box.show_all()
             
             # Request vote data.
-            self.fetchVoteCallback(PAGE_REPO, appList)
+            self.fetchVoteCallback(
+                PAGE_REPO, 
+                map (lambda appInfo: utils.getPkgName(appInfo.pkg), appList))
             
         # Scroll ScrolledWindow to top after render.
         utils.scrollToTop(self.scrolledwindow)
--- deepin-software-center-1.0.orig/src/deepin-software-center.desktop
+++ deepin-software-center-1.0/src/deepin-software-center.desktop
@@ -6,7 +6,7 @@ Comment=A general Linux software manager
 Comment[zh_CN]=Linux 通用软件管理器
 Comment[zh_TW]=Linux 通用軟體管理者
 Exec=deepin-software-center
-Icon=deepin-software-center
+Icon=/usr/share/deepin-software-center/icons/icon/icon.ico
 Terminal=false
 X-MultipleArgs=false
 Type=Application
--- deepin-software-center-1.0.orig/src/updateView.py
+++ deepin-software-center-1.0/src/updateView.py
@@ -70,11 +70,23 @@ class UpdateItem(DownloadItem):
         self.itemFrame.set(0.0, 0.5, 1.0, 1.0)
         self.itemFrame.add(self.itemEventBox)
         
-        self.appBasicBox = self.createBasicBox() 
-        self.appBasicAlign = gtk.Alignment()
-        self.appBasicAlign.set(0.0, 0.5, 0.0, 0.0)
-        self.appBasicAlign.add(self.appBasicBox)
-        self.itemBox.pack_start(self.appBasicAlign, True, True, self.APP_LEFT_PADDING_X)
+        # Add check box.
+        checkPadding = 10
+        self.checkButton = gtk.CheckButton()
+        checkButtonSetBackground(
+            self.checkButton,
+            False, False, 
+            "./icons/cell/select.png",
+            "./icons/cell/selected.png",
+            )
+        self.checkAlign = gtk.Alignment()
+        self.checkAlign.set(0.5, 0.5, 0.0, 0.0)
+        self.checkAlign.set_padding(checkPadding, checkPadding, checkPadding, checkPadding)
+        self.checkAlign.add(self.checkButton)
+        self.itemBox.pack_start(self.checkAlign, False, False)
+        
+        self.appBasicBox = createItemBasicBox(self.appInfo, 560, self.itemBox, False) 
+        self.itemBox.pack_start(self.appBasicBox, True, True)
         
         self.appAdditionBox = gtk.HBox()
         self.appAdditionAlign = gtk.Alignment()
@@ -86,32 +98,6 @@ class UpdateItem(DownloadItem):
        
         self.itemFrame.show_all()
         
-    def createBasicBox(self):
-        '''Create basic box.'''
-        padding_x = 5
-        
-        basicBox = gtk.HBox()
-        
-        # Add toggle box.
-        self.checkButton = gtk.CheckButton()
-        checkButtonSetBackground(
-            self.checkButton,
-            False, False, 
-            "./icons/cell/select.png",
-            "./icons/cell/selected.png",
-            )
-        checkAlign = gtk.Alignment()
-        checkAlign.set(0.5, 0.5, 0.0, 0.0)
-        checkAlign.set_padding(padding_x, padding_x, padding_x, padding_x)
-        checkAlign.add(self.checkButton)
-        basicBox.pack_start(checkAlign)
-        
-        # Add addition box.
-        itemBox = createItemBasicBox(self.appInfo, 240, False) 
-        basicBox.pack_start(itemBox)        
-
-        return basicBox
-        
     def clickItem(self, widget, event):
         '''Click item.'''
         if utils.isDoubleClick(event):
@@ -288,7 +274,9 @@ class UpdateView(appView.AppView):
             self.box.show_all()
             
             # Request vote data.
-            self.fetchVoteCallback(PAGE_UPGRADE, appList)
+            self.fetchVoteCallback(
+                PAGE_UPGRADE, 
+                map (lambda appInfo: utils.getPkgName(appInfo.pkg), appList))
             
         # Scroll ScrolledWindow to top after render.
         if scrollToTop:
--- /dev/null
+++ deepin-software-center-1.0/src/tools/test.py
@@ -0,0 +1,52 @@
+#! /usr/bin/env python
+# -*- coding: utf-8 -*-
+
+# Author:     Andy Stewart <lazycat.manatee@gmail.com>
+# Maintainer: Andy Stewart <lazycat.manatee@gmail.com>
+#
+# Copyright (C) 2011 Andy Stewart, all rights reserved.
+#
+# This program is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation, either version 3 of the License, or
+# any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+import apt_pkg
+import apt
+import urllib2
+
+def test():
+    '''Test'''
+    cache = apt.Cache()
+
+    # for pkg in cache:
+    #     if pkg.is_upgradable:
+    #         pkg.mark_upgrade()
+    #         print "* Upgrade package: %s" % (pkg.name)
+    #         print "Current version: %s" % (pkg.installed.version)
+    #         for version in pkg.versions:
+    #             print "Other version: %s" % (version.version)
+    
+    # for pkg in cache:
+    #     if pkg.is_installed:
+    #         if pkg.essential:
+    #             print "* ", pkg.name
+    #         else:
+    #             print pkg.name
+    
+    # for pkg in cache:
+    #     print pkg.name
+    
+    connection = urllib2.urlopen("http://test-linux.gteasy.com/getComment.php?n=3270-common", timeout=20)
+    print connection.read()
+                
+if __name__ == "__main__":
+    test()
--- /dev/null
+++ deepin-software-center-1.0/src/tools/convertIcon.sh
@@ -0,0 +1,8 @@
+#!/bin/sh
+# convertIcon.sh ImageDirectory TargetDirectory
+
+for img in `ls $1`
+do 
+    echo "Convert $1$img to $2${img%.*}.png" 
+    convert -resize $3x$3 $1$img $2${img%.*}.png
+done
